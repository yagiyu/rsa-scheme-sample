(define N 100)
(define (makee p q n)
  (if (= (gcd n (* (- p 1) (- q 1))) 1)
      n
      (makee p q (+ n 1))))
(define (maked p q e d)
  (if (= (modulo (* e d) (* (- p 1) (- q 1))) 1)
      d
      (maked p q e (+ d 1))))
(define (prime? n)
  (pr? n 1))
(define (pr? m n)
  (cond ((= m 1) #f)
        ((< m (* n n)) #t)
        ((not (= (gcd m n) 1)) #f)
        (#t (pr? m (+ n 1)))))
(define (pr2 n)
  (if (prime? n)
      n
      (pr2 (+ n 1))))
(define seed 1234567890)
(define (next n) (modulo (+ (* n 1103515245) 12345) 123456789))
(define (rnd n) (if (set! seed (next seed)) (modulo (next seed) n)))
(define (stream-cons a b) (cons a (delay b)))
(define (stream-car s) (car s))
(define (stream-cdr s) (force (cdr s)))
(define (stream-get s n)
  (if (= n 1)
      (stream-car s)
      (stream-get (stream-cdr s) (- n 1))))
(define (stream-head s n)
  (if (= n 0)
      '()
      (cons (stream-car s) (stream-head (stream-cdr s) (- n 1)))))
(define (prime n) (cons n (delay (prime (pr2 (+ n 1))))))
(define primes (prime (pr2 1)))
(define (pr-stream n) (stream-get primes n))
(define (pr n)
  (if (= n 1)
      2
      (pr2 (+ (pr (- n 1)) 1))))
(define (pow-mod x y n)
  (if (= y 1)
      (modulo x n)
      (modulo (* x (pow-mod x (- y 1) n )) n)))
(define (encrypt m k) (pow-mod m (cdr k) (car k)))
(define (private-key)
  (cons (pr (rnd N)) (pr (rnd N))))
(define (public-key p)
  (cons (* (car p) (cdr p)) (makee (car p) (cdr p) 2)))
(define (decrypt c pb pr)
  (pow-mod c (maked (car pr) (cdr pr) (cdr pb) 1) (car pb))) 
